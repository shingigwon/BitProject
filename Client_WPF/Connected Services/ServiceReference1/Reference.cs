//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MCB.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IChat")]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/IDCheck", ReplyAction="http://tempuri.org/IChat/IDCheckResponse")]
        bool IDCheck(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/IDCheck", ReplyAction="http://tempuri.org/IChat/IDCheckResponse")]
        System.Threading.Tasks.Task<bool> IDCheckAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SignUp", ReplyAction="http://tempuri.org/IChat/SignUpResponse")]
        void SignUp(string id, string pw, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SignUp", ReplyAction="http://tempuri.org/IChat/SignUpResponse")]
        System.Threading.Tasks.Task SignUpAsync(string id, string pw, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Login", ReplyAction="http://tempuri.org/IChat/LoginResponse")]
        string Login(string id, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Login", ReplyAction="http://tempuri.org/IChat/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string id, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Say", ReplyAction="http://tempuri.org/IChat/SayResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        object[] Say(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Say", ReplyAction="http://tempuri.org/IChat/SayResponse")]
        System.Threading.Tasks.Task<object[]> SayAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Save", ReplyAction="http://tempuri.org/IChat/SaveResponse")]
        void Save(string id, string question, string answer, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Save", ReplyAction="http://tempuri.org/IChat/SaveResponse")]
        System.Threading.Tasks.Task SaveAsync(string id, string question, string answer, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Load", ReplyAction="http://tempuri.org/IChat/LoadResponse")]
        string[] Load(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Load", ReplyAction="http://tempuri.org/IChat/LoadResponse")]
        System.Threading.Tasks.Task<string[]> LoadAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : MCB.ServiceReference1.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.ClientBase<MCB.ServiceReference1.IChat>, MCB.ServiceReference1.IChat {
        
        public ChatClient() {
        }
        
        public ChatClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IDCheck(string id) {
            return base.Channel.IDCheck(id);
        }
        
        public System.Threading.Tasks.Task<bool> IDCheckAsync(string id) {
            return base.Channel.IDCheckAsync(id);
        }
        
        public void SignUp(string id, string pw, string name) {
            base.Channel.SignUp(id, pw, name);
        }
        
        public System.Threading.Tasks.Task SignUpAsync(string id, string pw, string name) {
            return base.Channel.SignUpAsync(id, pw, name);
        }
        
        public string Login(string id, string pw) {
            return base.Channel.Login(id, pw);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string id, string pw) {
            return base.Channel.LoginAsync(id, pw);
        }
        
        public object[] Say(string msg) {
            return base.Channel.Say(msg);
        }
        
        public System.Threading.Tasks.Task<object[]> SayAsync(string msg) {
            return base.Channel.SayAsync(msg);
        }
        
        public void Save(string id, string question, string answer, string code) {
            base.Channel.Save(id, question, answer, code);
        }
        
        public System.Threading.Tasks.Task SaveAsync(string id, string question, string answer, string code) {
            return base.Channel.SaveAsync(id, question, answer, code);
        }
        
        public string[] Load(string id) {
            return base.Channel.Load(id);
        }
        
        public System.Threading.Tasks.Task<string[]> LoadAsync(string id) {
            return base.Channel.LoadAsync(id);
        }
    }
}
